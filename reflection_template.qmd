---
title: "STAT 331 Portfolio"
author: "Stella Raymond"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv
#This originated from Lab 2 Challenge, the very first load in. I removed library(viridis) becuase that is not relevant here.
library(tidyverse)
library("here")
surveys <- read_csv(here::here("data","surveys.csv"))
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

```

-   `txt`

```{r}
#| label: wd-1-txt

```

**WD-2: I can select necessary columns from a dataset.**

```{r}
#| label: wd-2
#This originated from Lab 4 Q4. Here I select only region, study_year, and mhi_2018 to remain within the dataset)
ca_childcare |>
  filter(study_year %in% c("2018", 
                           "2008")) |>
  select(region, 
         study_year, 
         mhi_2018) |>
  group_by(region, study_year) |>
  summarise(median_region = median(mhi_2018)) |>
  pivot_wider(id_cols = region,
             names_from = study_year, 
             values_from = median_region,
             names_prefix = "mhi_in_")|>
  ungroup()

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r}
#| label: wd-3-numeric
#This originated from Lab 4 Q4. Here I filter out year 2008 and 2018.
ca_childcare |>
  filter(study_year %in% c("2018", 
                           "2008")) |>
  select(region, 
         study_year, 
         mhi_2018) |>
  group_by(region, study_year) |>
  summarise(median_region = median(mhi_2018)) |>
  pivot_wider(id_cols = region,
             names_from = study_year, 
             values_from = median_region,
             names_prefix = "mhi_in_")|>
  ungroup()
```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
#This question originates from Lab 5. In this particular chunk, I filter using str_detect so I could extract all Annabels regardless of 
person |>
  filter(
    address_street_name == "Franklin Ave",
    str_detect(name, "Annabel")) |>
  pull(name,
       id)
```

-   factor

```{r}
#| label: wd-3-factor

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date
#This code comes from Lab 5. Originally, I did not convert the dates into lubridate dates. However, 
crime_scene_report |>
  filter(date == 20180115,
         type == "murder",
         city == "SQL City") |>
  pull(description)

#Here is the updated code USING lubridate instead of filtering it just as a numeric value
crime_scene_report |>
  mutate(date = ymd(date))|>
  filter(date == "2018-01-15",
         type == "murder",
         city == "SQL City") |>
  pull(description)
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor
#The question is from Lab 4 Q6. In this code chunk, I am changing age into a factor that includes all three age groups. Afterwards, I recode it and change the names.
ca_childcare |>
  select(region, 
         study_year, 
         mc_infant,
         mc_toddler,
         mc_preschool) |>
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "age",
               values_to = "price") |>
  mutate(age = fct(age,
                   levels = c("mc_infant",
                              "mc_toddler",
                              "mc_preschool")),
         age = fct_recode(.f = age,
                    "Infant" = "mc_infant",
                    "Toddler" = "mc_toddler",
                    "Preschool" = "mc_preschool"))
```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date
#As mentioned in WD-3, this line of code comes from Lab 5 and is altered from my original submission to include a date mutation with lubridate using ymd()
crime_scene_report |>
  mutate(date = ymd(date))|>
  filter(date == "2018-01-15",
         type == "murder",
         city == "SQL City") |>
  pull(description)
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left

```

-   `right_join()`

```{r}
#| label: wd-5-right

```

-   `inner_join()`

```{r}
#| label: wd-5-inner

```

-   `full_join()`

```{r}
#| label: wd-5-full

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
#This code originates from a small portion of Lab 4's Question 6. Here I take the three separate age colomns and combine them into a single colomn.
ca_childcare |>
  select(region, 
         study_year, 
         mc_infant,
         mc_toddler,
         mc_preschool) |>
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "age",
               values_to = "price")
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
#This is from Lab 4 question 4. Here, I make two new colomns out of the two years from study_year.
ca_childcare |>
  filter(study_year %in% c("2018", 
                           "2008")) |>
  select(region, 
         study_year, 
         mhi_2018) |>
  group_by(region, study_year) |>
  summarise(median_region = median(mhi_2018)) |>
  pivot_wider(id_cols = region,
             names_from = study_year, 
             values_from = median_region,
             names_prefix = "mhi_in_")|>
  ungroup()
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example

ADD CONTEXT!!!

ca_childcare |>
  filter(study_year == "2018") |>
  select(region, 
         study_year, 
         mcsa) |>
  group_by(region)|>
  summarise(median_region = median(mcsa))|>
  slice_min(median_region)
```

-   Example of function stops

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num
#This is from Lab 4 Question 6. Here, the two numeric variables are year and cost. 
ca_childcare |>
  select(region, 
         study_year, 
         mc_infant,
         mc_toddler,
         mc_preschool) |>
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "age",
               values_to = "price") |>
  mutate(age = fct(age,
                   levels = c("mc_infant",
                              "mc_toddler",
                              "mc_preschool")
                   ),
         age = fct_recode(.f = age,
                    "Infant" = "mc_infant",
                    "Toddler" = "mc_toddler",
                    "Preschool" = "mc_preschool"))|>
  ggplot(mapping = aes(x = study_year,
                       y = price,
                       color = fct_reorder2(.f = region,
                                           .x = study_year,
                                           .y = price)
                       )
         )+
  geom_smooth() +
  geom_point() +
  facet_wrap(~age) +
  scale_x_continuous(n.breaks = 6) +
  scale_y_continuous(n.breaks = 5, labels = label_dollar()) +
  theme_bw() +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  theme(axis.text.x = element_text(size = 7),
        axis.text.y = element_text(size = 7)) 
```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date
ca_childcare |>
  select(region, 
         study_year, 
         mc_infant,
         mc_toddler,
         mc_preschool) |>
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "age",
               values_to = "price") |>
  mutate(age = fct(age,
                   levels = c("mc_infant",
                              "mc_toddler",
                              "mc_preschool")
                   ),
         age = fct_recode(.f = age,
                    "Infant" = "mc_infant",
                    "Toddler" = "mc_toddler",
                    "Preschool" = "mc_preschool"))|>
  ggplot(mapping = aes(x = study_year,
                       y = price,
                       color = fct_reorder2(.f = region,
                                           .x = study_year,
                                           .y = price)
                       )
         )+
  geom_smooth() +
  geom_point() +
  facet_wrap(~age) +
  scale_x_continuous(n.breaks = 6) +
  scale_y_continuous(n.breaks = 5, labels = label_dollar()) +
  theme_bw() +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  theme(axis.text.x = element_text(size = 7),
        axis.text.y = element_text(size = 7))
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1
#Here is a line of code from Lab 2 question 16. I implement two ways of increasing readiblity: altering species to the y-axis and using the subtitle in place of a y-axis label.
ggplot(data = surveys,
       mapping = aes(
         x = weight, 
         y = species,
         )
       ) +
  geom_jitter(alpha = 0.5, 
              color = "green4")+
  geom_boxplot(outliers = FALSE)+
  labs(
    x = "Weight (g)", 
    y = "", 
    title = "Relationship Between Rodent Weight and Hindfoot Length",
    subtitle = "Y-axis representing Species",)
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-2
#This is from lab 4 question 6. Here, I make the plot more readible through various means. In particular, I alter the size of the axes, the label names, and the order of the legend
ca_childcare |>
  select(region, 
         study_year, 
         mc_infant,
         mc_toddler,
         mc_preschool) |>
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "age",
               values_to = "price") |>
  mutate(age = fct(age,
                   levels = c("mc_infant",
                              "mc_toddler",
                              "mc_preschool")),
         age = fct_recode(.f = age,
                    "Infant" = "mc_infant",
                    "Toddler" = "mc_toddler",
                    "Preschool" = "mc_preschool"))|>
  ggplot(mapping = aes(x = study_year,
                       y = price,
                       color = fct_reorder2(.f = region,
                                           .x = study_year,
                                           .y = price)))+
  geom_smooth() +
  geom_point() +
  facet_wrap(~age) +
  scale_x_continuous(n.breaks = 6) +
  scale_y_continuous(n.breaks = 5, labels = label_dollar()) +
  theme_bw() +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  theme(axis.text.x = element_text(size = 7),
        axis.text.y = element_text(size = 7)) 
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3
#Again, this code is from lab 4 question 6. Here, I reorder the legend color data in order to match with the lines
ca_childcare |>
  select(region, 
         study_year, 
         mc_infant,
         mc_toddler,
         mc_preschool) |>
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "age",
               values_to = "price") |>
  mutate(age = fct(age,
                   levels = c("mc_infant",
                              "mc_toddler",
                              "mc_preschool")),
         age = fct_recode(.f = age,
                    "Infant" = "mc_infant",
                    "Toddler" = "mc_toddler",
                    "Preschool" = "mc_preschool"))|>
  ggplot(mapping = aes(x = study_year,
                       y = price,
                       color = fct_reorder2(.f = region,
                                           .x = study_year,
                                           .y = price)))+
  geom_smooth() +
  geom_point() +
  facet_wrap(~age) +
  scale_x_continuous(n.breaks = 6) +
  scale_y_continuous(n.breaks = 5, labels = label_dollar()) +
  theme_bw() +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  theme(axis.text.x = element_text(size = 7),
        axis.text.y = element_text(size = 7)) 
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1
#I used non standard colors in Lab 2 challenge question by using colors from packages ggsci and viridis
surveys |> 
  ggplot(aes(x = weight, y = species, color = genus)) +
  geom_boxplot() +
  scale_colour_viridis_d() +
  labs(x = "Weight (g)", y = "", subtitle = "Species", legend = "Genus")

#this second code chunk is for a separate graph with alternative colors
surveys |> 
  ggplot(aes(x = weight, y = species, color = genus)) +
  geom_boxplot() +
  scale_color_lancet() +
  labs(x = "Weight (g)", y = "", subtitle = "Species", legend = "Genus")
```

-   I can use annotations

```{r}
#| label: dvs-3-2

```

-   I can be creative...

```{r}
#| label: dvs-3-3
#This code originates from Lab 4 Question 7. I will admit, I did not follow the question completely: I extended past what was asked for and included regional data when i wasn't supposed to. I would like to argue that this shows my creativity. I was originally just playing around with the graph and wanted to explore some trends. I was curious how region played into this correlation and was interested in the results of this inclusion (for examoke, all San Fransisco values are very high, Central Coast are right in the middle, etc.). For this reason, adding color just as an extra layer to graph demonstrates that I am thinking about what researchers would want to present and creative ways to include notible finds. 
ca_childcare |>
  filter(study_year == "2018") |>
  select(mhi_2018,
         mc_infant,
         study_year,
         region) |>
  ggplot(mapping = aes(x = mhi_2018, 
                       y = mc_infant,
                       color = region))+
  geom_jitter()+
  geom_smooth(method = lm, 
              color = "green4")+
  theme_bw()+
  labs(title = "Household Income and Weekly Price of 2018 Center-Based Infant Childcare",
       x = "Median Weekly Household Income ($)",
       y = "",
       subtitle = "Y-axis representing Full-Time Median Weekly Price ($)",
       color = "California Region")
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r}
#| label: dvs-6-1

```

-   Example 2

```{r}
#| label: dvs-6-2

```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1

```

-   Example 2

```{r}
#| label: dvs-7-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   `across()`

```{r}
#| label: pe-1-across

```

-   `map()` functions

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1
Palette_Earth <- c("#a0eb67", "#83ba59", "#3e6b1b", "#78eb05", "#ffd673", "#c99f3a", "#8a6204", "#d9cb0f")
surveys |> 
  ggplot(aes(x = weight, y = species, color = genus)) +
  geom_boxplot() +
  scale_color_manual(values = Palette_Earth) +
  labs(x = "Weight (g)", y = "", subtitle = "Species", legend = "Genus")
```

-   Function that operates on data frames

```{r}
#| label: pe-2-2

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across

```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1
chisq.test(teacher_evals_compare$sen_level, teacher_evals_compare$SET_level)

```

-   Example 2

```{r}
#| label: dsm-2-2

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
